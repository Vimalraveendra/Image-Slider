{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","settings","dots","infinite","slidesToShow","slidesToScroll","arrows","autoplay","speed","autoplaySpeed","cssEase","App","state","images","axios","get","process","hits","data","this","setState","console","log","className","styles","heading","map","image","userImageURL","length","container","key","id","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,UAAY,uBAAuB,OAAS,oBAAoB,QAAU,uB,oQCQ/GC,EAAW,CACbC,MAAM,EACNC,UAAU,EACVC,aAAc,EACdC,eAAgB,EAChBC,QAAQ,EACRC,UAAU,EACVC,MAAO,IACPC,cAAe,IACfC,QAAS,UAwCIC,E,4MArCbC,MAAQ,CACNC,OAAQ,I,6MAMIC,IAAMC,IAAN,uCArBAC,qCAqBA,6C,gBADAC,E,EAARC,KAAQD,KAIVE,KAAKC,SAAS,CAAEP,OAAQI,I,gDAExBI,QAAQC,IAAI,QAAZ,M,8IAIF,OACE,yBAAKC,UAAWC,IAAOb,KACrB,wBAAIY,UAAWC,IAAOC,SAAtB,gBACA,kBAAC,IAAWxB,EACTkB,KAAKP,MAAMC,OAAOa,KAAI,SAAAC,GACrB,OAAOA,EAAMC,aAAaC,OACxB,yBAAKN,UAAWC,IAAOM,UAAWC,IAAKJ,EAAMK,IAC3C,yBACET,UAAWC,IAAOX,OAClBoB,IAAKN,EAAMC,aACXM,IAAI,eAGN,c,GA9BEC,IAAMC,WCRJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.c63ad4ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"container\":\"App_container__1MQN3\",\"images\":\"App_images__1pgcE\",\"heading\":\"App_heading__2nYdz\"};","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport axios from \"axios\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nlet settings = {\n  dots: true,\n  infinite: true,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  arrows: true,\n  autoplay: true,\n  speed: 2000,\n  autoplaySpeed: 2000,\n  cssEase: \"linear\"\n};\nclass App extends React.Component {\n  state = {\n    images: []\n  };\n  async componentDidMount() {\n    try {\n      const {\n        data: { hits }\n      } = await axios.get(\n        `https://pixabay.com/api/?key=${API_KEY}&q=red+cars&image_type=photo&per_page=10`\n      );\n      this.setState({ images: hits });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n  render() {\n    return (\n      <div className={styles.App}>\n        <h1 className={styles.heading}>Image Slider</h1>\n        <Slider {...settings}>\n          {this.state.images.map(image => {\n            return image.userImageURL.length ? (\n              <div className={styles.container} key={image.id}>\n                <img\n                  className={styles.images}\n                  src={image.userImageURL}\n                  alt=\"user-view\"\n                ></img>\n              </div>\n            ) : null;\n          })}\n        </Slider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}